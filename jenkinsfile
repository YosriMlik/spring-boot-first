pipeline {
    agent any

    tools {
        jdk 'JDK'
        maven 'Maven 3.9.9'
    }


    environment {
        DOCKER_IMAGE_NAME = 'yosrimlik/spring-boot-first' // Docker Hub image name
        DOCKER_IMAGE_TAG = 'latest' // Docker image tag
        DOCKER_COMPOSE_PATH = '.' // Docker Compose file is in the project root
        REMOTE_USER = 'ubuntu-server' // Remote server username
        REMOTE_HOST = '192.168.11.132' // Remote server IP or hostname -
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/YosriMlik/spring-boot-first.git' // Your Git repo URL
            }
        }

        stage('Build Maven Project') {
            steps {
                sh 'mvn clean package -DskipTests'  // Build the Spring Boot application
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker-compose build' // Build the Docker image using docker-compose
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                echo "Pushing images"
                sh "ls"
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER" --password-stdin
                        docker-compose push
                    '''
                }
            }
        }

stage('Deploy to Remote Server') {
    steps {
        echo 'Deploying Docker container to remote server...'
        withCredentials([sshUserPrivateKey(
            credentialsId: 'vm2-ssh', // Use the ID of the SSH credentials
            keyFileVariable: 'SSH_KEY'
        )]) {
            sh """
                ssh -i ${SSH_KEY} -o StrictHostKeyTesting=no ${REMOTE_USER}@${REMOTE_HOST} '
                    # Pull the MySQL image
                    docker pull mysql:8.0

                    # Pull the Spring Boot app image
                    docker pull yosrimlik/spring-boot-first:latest

                    # Create a minimal docker-compose.yml file
                    echo "
                        version: '3.8'
                        services:
                          mysql-db:
                            image: mysql:8.0
                            container_name: mysql-db
                            environment:
                              MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
                              MYSQL_DATABASE: mydb
                            ports:
                              - \"3306:3306\"
                            networks:
                              - app-network

                          spring-boot-app:
                            image: yosrimlik/spring-boot-first:latest
                            container_name: spring-boot-app
                            ports:
                              - \"8083:8083\"
                            environment:
                              SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/mydb?serverTimezone=UTC&createDatabaseIfNotExist=true
                              SPRING_DATASOURCE_USERNAME: root
                              SPRING_DATASOURCE_PASSWORD: ''
                            depends_on:
                              - mysql-db
                            networks:
                              - app-network

                        networks:
                          app-network:
                            driver: bridge
                    " > docker-compose.yml

                    # Run docker-compose
                    docker-compose up -d
                '
            """
        }
    }
}
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}